# This file is managed by the configuration.dhall file, all changes will be lost.
#
# Copyright 2020 Red Hat
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

FROM quay.io/operator-framework/ansible-operator:v0.13.0

# Install extra requirements
USER root

# See: https://github.com/operator-framework/operator-sdk/issues/2384
RUN pip3 install --upgrade openshift

# unarchive: bzip2 and tar
# generate zuul ssh-keys or certificate: openssh and openssl
# manage configuration: git
RUN dnf install -y bzip2 tar openssh openssl git

# Install dhall-to-json
RUN python3 -c 'import pathlib, urllib.request;from hashlib import sha256;fail = lambda s: (print(s), exit(1));u, h = "https://github.com/dhall-lang/dhall-haskell/releases/download/1.29.0/dhall-json-1.6.1-x86_64-linux.tar.bz2", "7e65f933fb215629d18d23bc774688c598d4c11b62865f3546ee23ae36b25290";output = pathlib.Path("/bin").expanduser();local = pathlib.Path("~/.cache/").expanduser() / h;notLocal = not local.exists() or sha256(local.read_bytes()).hexdigest() != h;print(u + ": downloading") if notLocal else True;req = urllib.request.urlopen(u) if notLocal else True;data = req.read() if notLocal else local.read_bytes();digest = sha256(data).hexdigest();fail(u + ": expected " + h + "got " + digest) if digest != h else True;local.parent.mkdir(parents=True, exist_ok=True);local.write_bytes(data) if notLocal else True;print(u + ": extracted to " + str(output));from subprocess import Popen, PIPE;p = Popen("tar -xf - --strip-components=2 -j --mode='a+x' -C".split() + [str(output)], stdin=PIPE);p.communicate(data);fail(u + ": failed to extract") if p.wait() else True' && rm -Rf ~/.cache/

# Back to the default operator user
USER 1001

# Install dhall libraries
RUN git clone --depth 1 https://github.com/dhall-lang/dhall-lang /opt/ansible/dhall-lang && git clone --depth 1 https://github.com/dhall-lang/dhall-kubernetes /opt/ansible/dhall-kubernetes
ENV DHALL_PRELUDE=/opt/ansible/dhall-lang/Prelude/package.dhall
ENV DHALL_KUBERNETES=/opt/ansible/dhall-kubernetes/package.dhall
ENV DHALL_K8S=/opt/ansible/dhall-kubernetes/typesUnion.dhall

# Copy configuration
COPY ./ /opt/ansible/conf/

# Cache dhall objects
RUN echo 'let Prelude = ~/conf/Prelude.dhall let Kubernetes = ~/conf/Kubernetes.dhall let k8s = ~/conf/KubernetesUnion.dhall in "OK"' | \
    env DHALL_PRELUDE=/opt/ansible/dhall-lang/Prelude/package.dhall   \
        DHALL_KUBERNETES=/opt/ansible/dhall-kubernetes/package.dhall  \
        DHALL_K8S=/opt/ansible/dhall-kubernetes/typesUnion.dhall dhall-to-json


# Copy ansible operator requirements
COPY operator/watches.yaml /opt/ansible/watches.yaml
COPY operator/roles /opt/ansible/roles
